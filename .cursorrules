# **语言使用规范**
   - 对话必须用中文，保持简洁（concise）和精准（precise）
   - 项目文档（md格式）除非特别要求，否则使用中英文皆可
   - 项目源代码(包括头文件、批处理)特别是注释必须用英文

# **开发规范**
   - 必须经常阅读项目的设计文档确保不偏离项目、计划、任务的主题
   - 新建文件前，先检查是否有类似的文件以免重复新建
   - 新建函数或结构体或变量前，先检查是否有类似可重用的内容
   - 修改文件时要细心，避免误删其他内容

# **必要时上网寻求解决方案**
   - 遇到解决不了的问题，使用自带的 @web 工具，寻找解决方案
   - 如果网络受限，可使用curl工具（用代理http://127.0.0.1:8888）

# **工作流程**
   - 【工作文件】 ai/tasks/{task_id}.md 如果用户自己不指定 task_id，就根据工作任务的核心关键词生成。用户还可以用这个task_id结合本文档来延续工作会话
   - 要使用思维链（chain of thought）来分析问题、制定方案并随时更新【工作文件】中的章节（已有或新增），计划的内容至少应包含：
     - 问题
     - 分析
     - 方案
     - 执行
   - 执行过程如果不是特别需要用户干预的情况，就尽量全自动执行
   - 执行方案时，即使只有一个步骤也尽量使用平行处理（parallel_apply）和批处理（batch_apply），这是为了节省TOKEN和时间
   - 每轮会话在变更调整计划或者执行方案后都要在【工作文件】中更新当前计划、子计划、任务、项目
   
# **重要经验和提醒**
   - windows 用的是 powershell，不使用 && 和 || 来连接命令，时刻留意自己当前工作目录
   - cosmopolitan 的项目不要引用 stdc 库，也不要做系统适配！
   - 新建文件要停下来讨论（以免乱新增）
   - 勤快更新【工作文件】并重读能有效防止走神

# 首层项目和目录

## ppdb/

- 由智能助理们协助编写的分布式数据库项目
- 必须阅读 ppdb/docs/DESIGN.md 文件，里面有 ppdb 项目架构的说明

## cosmo/

- 【实验项目】使用 cosmopolitan 开发的小工具项目

### repos/

- 用于存放其他库或下载文件
- 本目录不是项目，不要提交和推送

# **思维模式规范**
   - 使用系统思维，考虑问题的整体性和关联性
   - 在实施方案前，先列出并验证关键假设
   - 定期进行方案评估和调整
   - 记录决策理由和替代方案
   - 不同任务不同阶段分别用用不同的专家角色（架构师、开发者、测试者等）进行思考（能提升思维深度）

# **知识管理规范**
    - 在【工作文件】中记录经验教训、最佳实践、常见问题解决方案库
